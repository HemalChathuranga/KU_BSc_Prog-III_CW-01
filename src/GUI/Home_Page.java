/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package GUI;

import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import static javax.swing.JOptionPane.ERROR_MESSAGE;
import javax.swing.RowFilter;
import javax.swing.Timer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author Hemal Chathuranga
 */
public class Home_Page extends javax.swing.JFrame {

    public Home_Page() {
        initComponents();
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("Tooth_Icon.png")));
        curDate();
        curTime();
    }
    
    
    //Method to get the current Date into Loging Page
    void curDate(){
        
        Date curDate = new Date();
        SimpleDateFormat sDate = new SimpleDateFormat("YYYY.MM.dd");
        lblDate.setText(sDate.format(curDate));
    }
    
    //Method to get the current Time into Loging Page
    void curTime(){
        
        new Timer(0, new ActionListener() {
            
            @Override
            public void actionPerformed(ActionEvent e) {
                Date curDate = new Date();
                SimpleDateFormat sDate = new SimpleDateFormat("HH:mm:ss");
                lblTime.setText(sDate.format(curDate));
            }   
        }).start();  
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel3 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        lblUserName = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        btnDeleteAppoinment = new javax.swing.JButton();
        btnBookAppoinment = new javax.swing.JButton();
        btnUpdateAppoinment1 = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        cmbDate = new javax.swing.JComboBox<>();
        cmbTime = new javax.swing.JComboBox<>();
        txtSearchName = new javax.swing.JTextField();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblAppSummary = new javax.swing.JTable();
        jLabel5 = new javax.swing.JLabel();
        cmbAppStatus = new javax.swing.JComboBox<>();
        jLabel6 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblAllAppoinments = new javax.swing.JTable();
        jPanel6 = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        lblTime = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        lblDate = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Tooth_Care_Appoinment_Management_System");
        setBackground(new java.awt.Color(255, 255, 255));

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));

        jLabel7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/Home_P_1.jpg"))); // NOI18N
        jLabel7.setText("jLabel7");

        jLabel8.setForeground(new java.awt.Color(153, 153, 153));
        jLabel8.setText("Logged In as:");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(lblUserName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel8)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblUserName, javax.swing.GroupLayout.DEFAULT_SIZE, 24, Short.MAX_VALUE)
                .addContainerGap())
        );

        btnDeleteAppoinment.setBackground(new java.awt.Color(0, 153, 153));
        btnDeleteAppoinment.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        btnDeleteAppoinment.setForeground(new java.awt.Color(255, 255, 255));
        btnDeleteAppoinment.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/del_app.png"))); // NOI18N
        btnDeleteAppoinment.setText("Delete Appointment");
        btnDeleteAppoinment.setToolTipText("");
        btnDeleteAppoinment.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        btnDeleteAppoinment.setFocusPainted(false);
        btnDeleteAppoinment.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btnDeleteAppoinment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteAppoinmentActionPerformed(evt);
            }
        });

        btnBookAppoinment.setBackground(new java.awt.Color(0, 153, 153));
        btnBookAppoinment.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        btnBookAppoinment.setForeground(new java.awt.Color(255, 255, 255));
        btnBookAppoinment.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/add_app.png"))); // NOI18N
        btnBookAppoinment.setText("Book Appointment");
        btnBookAppoinment.setToolTipText("");
        btnBookAppoinment.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        btnBookAppoinment.setFocusPainted(false);
        btnBookAppoinment.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btnBookAppoinment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBookAppoinmentActionPerformed(evt);
            }
        });

        btnUpdateAppoinment1.setBackground(new java.awt.Color(0, 153, 153));
        btnUpdateAppoinment1.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        btnUpdateAppoinment1.setForeground(new java.awt.Color(255, 255, 255));
        btnUpdateAppoinment1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/edit_app.png"))); // NOI18N
        btnUpdateAppoinment1.setText("Update Appointment");
        btnUpdateAppoinment1.setToolTipText("");
        btnUpdateAppoinment1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        btnUpdateAppoinment1.setFocusPainted(false);
        btnUpdateAppoinment1.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btnUpdateAppoinment1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateAppoinment1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnDeleteAppoinment, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnUpdateAppoinment1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnBookAppoinment, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addComponent(btnBookAppoinment, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnUpdateAppoinment1, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnDeleteAppoinment, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel4.setBackground(new java.awt.Color(255, 255, 255));

        jPanel5.setBackground(new java.awt.Color(255, 255, 255));
        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "View Appoinments", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 14), new java.awt.Color(0, 0, 0))); // NOI18N

        jLabel1.setText("By Date :");

        jLabel3.setText("By Appintment ID :");

        jLabel4.setText("By Patient Name :");

        cmbDate.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "All Dates", "Monday", "Wednesday", "Saturday", "Sunday" }));
        cmbDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbDateActionPerformed(evt);
            }
        });

        cmbTime.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "All", "Mon01", "Mon02", "Mon03", "Mon04", "Mon05", "Mon06", "Wed01", "Wed02", "Wed03", "Wed04", "Wed05", "Wed06", "Sat01", "Sat02", "Sat03", "Sat04", "Sat05", "Sat06", "Sat07", "Sat08", "Sat09", "Sat10", "Sat11", "Sat12", "Sat13", "Sat14", "Sun01", "Sun02", "Sun03", "Sun04", "Sun05", "Sun06", "Sun07", "Sun08", "Sun09", "Sun10", "Sun11", "Sun12", "Sun13", "Sun14" }));
        cmbTime.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbTimeActionPerformed(evt);
            }
        });

        txtSearchName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtSearchNameKeyTyped(evt);
            }
        });

        jScrollPane3.setBackground(new java.awt.Color(255, 255, 255));

        tblAppSummary.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        tblAppSummary.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"Monday", "6", "6"},
                {"Wednesday", "6", "6"},
                {"Saturday", "14", "14"},
                {"Sunday", "14", "14"}
            },
            new String [] {
                "Date", "Available", "Balance"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblAppSummary.setEnabled(false);
        tblAppSummary.setRowHeight(25);
        tblAppSummary.setShowGrid(false);
        tblAppSummary.setShowHorizontalLines(true);
        jScrollPane3.setViewportView(tblAppSummary);
        if (tblAppSummary.getColumnModel().getColumnCount() > 0) {
            tblAppSummary.getColumnModel().getColumn(0).setResizable(false);
            tblAppSummary.getColumnModel().getColumn(0).setPreferredWidth(30);
            tblAppSummary.getColumnModel().getColumn(1).setResizable(false);
            tblAppSummary.getColumnModel().getColumn(1).setPreferredWidth(25);
            tblAppSummary.getColumnModel().getColumn(2).setResizable(false);
            tblAppSummary.getColumnModel().getColumn(2).setPreferredWidth(25);
        }

        jLabel5.setText("By Appointment Status :");

        cmbAppStatus.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "All Appoinments", "Booked Slots", "Available Slots", "Completed" }));
        cmbAppStatus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbAppStatusActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        jLabel6.setText("Appointments Summary :");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel4)
                    .addComponent(jLabel3)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(cmbTime, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cmbDate, 0, 158, Short.MAX_VALUE)
                            .addComponent(txtSearchName))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 30, Short.MAX_VALUE)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addComponent(cmbAppStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(96, 96, 96))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 249, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addContainerGap())))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbAppStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cmbTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtSearchName, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(22, 22, 22))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))))
        );

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/Home_Page_cover.jpg"))); // NOI18N

        jScrollPane2.setBackground(new java.awt.Color(255, 255, 255));

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));

        jScrollPane1.setColumnHeaderView(null);

        tblAllAppoinments.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"Monday", "6:00pm - 6:30pm", "Mon01", null, null, null, null, null, null, null, null, null, null, null, "Available"},
                {"Monday", "6:30pm - 7:00pm", "Mon02", null, null, null, null, null, null, null, null, null, null, null, "Available"},
                {"Monday", "7:00pm - 7:30pm", "Mon03", "Mr.", "Hemal", "Chath", "32", "0713518813", "defedve@gmail.com", "Kottawa", null, "1000", "Dr. A.D. Ranasinghe", "Item 1", "Booked"},
                {"Monday", "7:30pm - 8:00pm", "Mon04", null, null, null, null, null, null, null, null, null, null, null, "Available"},
                {"Monday", "8:00pm - 8:30pm", "Mon05", null, null, null, null, null, null, null, null, null, null, null, "Available"},
                {"Monday", "8:30pm - 9:00pm", "Mon06", null, null, null, null, null, null, null, null, null, null, null, "Available"},
                {"Wednesday", "6:00pm - 6:30pm", "Wed01", null, null, null, null, null, null, null, null, null, null, null, "Available"},
                {"Wednesday", "6:30pm - 7:00pm", "Wed02", null, null, null, null, null, null, null, null, null, null, null, "Available"},
                {"Wednesday", "7:00pm - 7:30pm", "Wed03", null, null, null, null, null, null, null, null, null, null, null, "Available"},
                {"Wednesday", "7:30pm - 8:00pm", "Wed04", null, "Chathu", null, null, null, null, null, null, null, null, null, "Completed"},
                {"Wednesday", "8:00pm - 8:30pm", "Wed05", null, null, null, null, null, null, null, null, null, null, null, "Available"},
                {"Wednesday", "8:30pm - 9:00pm", "Wed06", null, null, null, null, null, null, null, null, null, null, null, "Available"},
                {"Saturday", "3:00pm - 3:30pm", "Sat01", null, null, null, null, null, null, null, null, null, null, null, "Available"},
                {"Saturday", "3:30pm - 4:00pm", "Sat02", null, null, null, null, null, null, null, null, null, null, null, "Available"},
                {"Saturday", "4:00pm - 4:30pm", "Sat03", null, null, null, null, null, null, null, null, null, null, null, "Available"},
                {"Saturday", "4:30pm - 5:00pm", "Sat04", null, null, null, null, null, null, null, null, null, null, null, "Available"},
                {"Saturday", "5:00pm - 5:30pm", "Sat05", null, "Hasani", null, null, null, null, null, null, null, null, null, "Booked"},
                {"Saturday", "5:30pm - 6:00pm", "Sat06", null, null, null, null, null, null, null, null, null, null, null, "Available"},
                {"Saturday", "6:00pm - 6:30pm", "Sat07", null, null, null, null, null, null, null, null, null, null, null, "Available"},
                {"Saturday", "6:30pm - 7:00pm", "Sat08", null, null, null, null, null, null, null, null, null, null, null, "Available"},
                {"Saturday", "7:00pm - 7:30pm", "Sat09", null, null, null, null, null, null, null, null, null, null, null, "Available"},
                {"Saturday", "7:30pm - 8:00pm", "Sat10", null, null, null, null, null, null, null, null, null, null, null, "Available"},
                {"Saturday", "8:00pm - 8:30pm", "Sat11", null, null, null, null, null, null, null, null, null, null, null, "Available"},
                {"Saturday", "8:30pm - 9:00pm", "Sat12", null, null, null, null, null, null, null, null, null, null, null, "Available"},
                {"Saturday", "9:00pm - 9:30pm", "Sat13", null, null, null, null, null, null, null, null, null, null, null, "Available"},
                {"Saturday", "9:30pm - 10:00pm", "Sat14", null, null, null, null, null, null, null, null, null, null, null, "Available"},
                {"Sunday", "3:00pm - 3:30pm", "Sun01", null, null, null, null, null, null, null, null, null, null, null, "Available"},
                {"Sunday", "3:30pm - 4:00pm", "Sun02", null, null, null, null, null, null, null, null, null, null, null, "Available"},
                {"Sunday", "4:00pm - 4:30pm", "Sun03", null, null, null, null, null, null, null, null, null, null, null, "Available"},
                {"Sunday", "4:30pm - 5:00pm", "Sun04", null, null, null, null, null, null, null, null, null, null, null, "Available"},
                {"Sunday", "5:00pm - 5:30pm", "Sun05", null, null, null, null, null, null, null, null, null, null, null, "Available"},
                {"Sunday", "5:30pm - 6:00pm", "Sun06", null, null, null, null, null, null, null, null, null, null, null, "Available"},
                {"Sunday", "6:00pm - 6:30pm", "Sun07", null, "Sasrika", null, null, null, null, null, null, null, null, null, "Completed"},
                {"Sunday", "6:30pm - 7:00pm", "Sun08", null, null, null, null, null, null, null, null, null, null, null, "Available"},
                {"Sunday", "7:00pm - 7:30pm", "Sun09", null, null, null, null, null, null, null, null, null, null, null, "Available"},
                {"Sunday", "7:30pm - 8:00pm", "Sun10", null, null, null, null, null, null, null, null, null, null, null, "Available"},
                {"Sunday", "8:00pm - 8:30pm", "Sun11", null, null, null, null, null, null, null, null, null, null, null, "Available"},
                {"Sunday", "8:30pm - 9:00pm", "Sun12", null, null, null, null, null, null, null, null, null, null, null, "Available"},
                {"Sunday", "9:00pm - 9:30pm", "Sun13", null, null, null, null, null, null, null, null, null, null, null, "Available"},
                {"Sunday", "9:30pm - 10:00pm", "Sun 14", null, null, null, null, null, null, null, null, null, null, null, "Available"}
            },
            new String [] {
                "Appoinment Date", "App. Time", "App. ID", "Title", "First Name", "Last Name", "Age", "Mobile Num.", "Email", "Address", "Notes", "App. Fee", "Doc. Name", "Treatment", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblAllAppoinments.setRowHeight(20);
        tblAllAppoinments.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(tblAllAppoinments);
        if (tblAllAppoinments.getColumnModel().getColumnCount() > 0) {
            tblAllAppoinments.getColumnModel().getColumn(0).setPreferredWidth(200);
            tblAllAppoinments.getColumnModel().getColumn(1).setPreferredWidth(200);
            tblAllAppoinments.getColumnModel().getColumn(2).setPreferredWidth(80);
            tblAllAppoinments.getColumnModel().getColumn(3).setPreferredWidth(80);
            tblAllAppoinments.getColumnModel().getColumn(4).setPreferredWidth(150);
            tblAllAppoinments.getColumnModel().getColumn(5).setPreferredWidth(200);
            tblAllAppoinments.getColumnModel().getColumn(6).setPreferredWidth(50);
            tblAllAppoinments.getColumnModel().getColumn(7).setPreferredWidth(120);
            tblAllAppoinments.getColumnModel().getColumn(8).setPreferredWidth(180);
            tblAllAppoinments.getColumnModel().getColumn(9).setPreferredWidth(400);
            tblAllAppoinments.getColumnModel().getColumn(10).setPreferredWidth(400);
            tblAllAppoinments.getColumnModel().getColumn(11).setPreferredWidth(100);
            tblAllAppoinments.getColumnModel().getColumn(12).setPreferredWidth(180);
            tblAllAppoinments.getColumnModel().getColumn(13).setPreferredWidth(150);
            tblAllAppoinments.getColumnModel().getColumn(14).setPreferredWidth(100);
        }

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1675, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(911, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 364, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(247, Short.MAX_VALUE))
        );

        jScrollPane2.setViewportView(jPanel2);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(2, 2, 2)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 915, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(110, 110, 110))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 401, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18))
        );

        jLabel9.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel9.setText("Date :");
        jLabel9.setToolTipText("");

        lblTime.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        lblTime.setToolTipText("");

        jLabel11.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel11.setText("Time :");
        jLabel11.setToolTipText("");

        lblDate.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        lblDate.setToolTipText("");

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lblDate, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(lblTime, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblDate, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblTime, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, 934, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5)
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    //Method for Date combo box actions
    private void cmbDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbDateActionPerformed
        
        int jComboDate;
        
        jComboDate = cmbDate.getSelectedIndex();
        
        //Reduce timeslot selection options and filter main appoinments table according to the date selections
        switch(jComboDate){
            case 0:
               cmbTime.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "All", "Mon01", "Mon02", "Mon03", "Mon04", "Mon05", "Mon06", "Wed01", "Wed02", "Wed03", "Wed04", "Wed05", "Wed06", "Sat01", "Sat02", "Sat03", "Sat04", "Sat05", "Sat06", "Sat07", "Sat08", "Sat09", "Sat10", "Sat11", "Sat12", "Sat13", "Sat14", "Sun01", "Sun02", "Sun03", "Sun04", "Sun05", "Sun06", "Sun07", "Sun08", "Sun09", "Sun10", "Sun11", "Sun12", "Sun13", "Sun14" })); 
               appointmentTableFilter("All Dates", 0);
               break;
            case 1:
               cmbTime.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Mon01", "Mon02", "Mon03", "Mon04", "Mon05", "Mon06" }));
                appointmentTableFilter("Monday", 0);
               break;
            case 2:
               cmbTime.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Wed01", "Wed02", "Wed03", "Wed04", "Wed05", "Wed06" }));
               appointmentTableFilter("Wednesday", 0);
               break;
            case 3:
               cmbTime.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Sat01", "Sat02", "Sat03", "Sat04", "Sat05", "Sat06", "Sat07", "Sat08", "Sat09", "Sat10", "Sat11", "Sat12", "Sat13", "Sat14" }));
               appointmentTableFilter("Saturday", 0);
               break;
            case 4:
               cmbTime.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Sun01", "Sun02", "Sun03", "Sun04", "Sun05", "Sun06", "Sun07", "Sun08", "Sun09", "Sun10", "Sun11", "Sun12", "Sun13", "Sun14" }));
               appointmentTableFilter("Sunday", 0);
               break;
        }

    }//GEN-LAST:event_cmbDateActionPerformed

    
    //Method for appoinment status filter
    private void cmbAppStatusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbAppStatusActionPerformed
        
        int jComAppSlot = cmbAppStatus.getSelectedIndex();
        
        //All Appoinments, Booked Slots, Available Slots, Completed
        //Available, Booked, Treated, Paid, Completed
        
        switch(jComAppSlot){
            case 0:
                appointmentTableFilter("All Appoinments", 0);
                break;
            case 1:
                appointmentTableFilter("Booked", 14);
                break;
            case 2:
                appointmentTableFilter("Available", 14);
                break;
            case 3:
                appointmentTableFilter("Completed", 14);
                break;
        }
    }//GEN-LAST:event_cmbAppStatusActionPerformed

    
    
    //Method for Time Filter combo box actions
    private void cmbTimeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbTimeActionPerformed
        
        String jComTime;
        jComTime = cmbTime.getSelectedItem().toString();
        
        //Filter main appoinments table according to the time selection
        appointmentTableFilter(jComTime, 2);
   
    }//GEN-LAST:event_cmbTimeActionPerformed
    
    //Method for delete appoinments from main table
    private void btnDeleteAppoinmentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteAppoinmentActionPerformed

        int selectedRowIndex = tblAllAppoinments.getSelectedRow();
        
        if(selectedRowIndex == -1){
            JOptionPane.showMessageDialog(this, "Please Select the record you need to delete.", "Appoinment Delete Error", ERROR_MESSAGE);
        }
        else if(tblAllAppoinments.getValueAt(selectedRowIndex, 14).equals("Available")){
            JOptionPane.showMessageDialog(this, "Selected time slot doesn't have a booking to delete.", "Appoinment Update Error", ERROR_MESSAGE);
        }
        else{
            String appID = tblAllAppoinments.getValueAt(selectedRowIndex, 2).toString();
            String title = tblAllAppoinments.getValueAt(selectedRowIndex, 3).toString();
            String fName = tblAllAppoinments.getValueAt(selectedRowIndex, 4).toString();
            String lName = tblAllAppoinments.getValueAt(selectedRowIndex, 5).toString();
            
            int confirmation = JOptionPane.showConfirmDialog(null, "App. ID : " + appID + "\n" + "Name : " + title + " " + fName + " " + lName + "\n" + "Are you sure you want to delete?", "Delete Confirmation", JOptionPane.YES_NO_OPTION);
            
            if(confirmation == JOptionPane.YES_OPTION){
                
                //Calling same method used to add bookings for delete records as well by enhancing method addDataRowtoMainTable
                Object[] applicationDetails = new Object[12];
                addDataRowtoMainTable(selectedRowIndex, applicationDetails, "Delete_Booking");
            }
        }
    }//GEN-LAST:event_btnDeleteAppoinmentActionPerformed
    
    //Method for Patient name search text box actions
    private void txtSearchNameKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchNameKeyTyped
        
        String nameSearchtxt;
        
        nameSearchtxt = txtSearchName.getText();
        
        appointmentTableFilter(nameSearchtxt, -1);
        
    }//GEN-LAST:event_txtSearchNameKeyTyped
    
    //Method for adding appoinments to the main table
    private void btnBookAppoinmentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBookAppoinmentActionPerformed
        
        Appoinment_Details newAppoinment = new Appoinment_Details(tblAllAppoinments);
        newAppoinment.setVisible(true);
        newAppoinment.setLocationRelativeTo(null);
        newAppoinment.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
    }//GEN-LAST:event_btnBookAppoinmentActionPerformed
    
    //Method for updating appoinments in the main table
    private void btnUpdateAppoinment1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateAppoinment1ActionPerformed

        int selectedRowIndex = tblAllAppoinments.getSelectedRow();
        
        if(selectedRowIndex == -1){
            JOptionPane.showMessageDialog(this, "Please Select the record you need to update.", "Appoinment Update Error", ERROR_MESSAGE);
        }
        else if(tblAllAppoinments.getValueAt(selectedRowIndex, 14).equals("Available")){
            JOptionPane.showMessageDialog(this, "Selected time slot doesn't have a booking yet.", "Appoinment Update Error", ERROR_MESSAGE);
        }
        else{
            
            String appID = tblAllAppoinments.getValueAt(selectedRowIndex, 2).toString();
            
            Object[] currDataRow = new Object[12];
            
            for (int i=0; i<12; i++){
                currDataRow[i] = tblAllAppoinments.getValueAt(selectedRowIndex, (i+3));
            }
            
            Appoinment_Details updateAppoinment = new Appoinment_Details(currDataRow, selectedRowIndex, "Update_Booking", appID);
            updateAppoinment.setVisible(true);
            updateAppoinment.setLocationRelativeTo(null);
            updateAppoinment.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE); 
        } 
    }//GEN-LAST:event_btnUpdateAppoinment1ActionPerformed

    
    //Method to use when a filter required on the Main appoinments table.
    private void appointmentTableFilter(String fltrText, int fltrColumn){
        
        //Make Appoinment full table sortable and Filterble.
        DefaultTableModel dtmFilterDate = (DefaultTableModel) tblAllAppoinments.getModel();
        
        
        
        final TableRowSorter<TableModel> allApptblSorter = new TableRowSorter<>(dtmFilterDate);
        tblAllAppoinments.setRowSorter(allApptblSorter);
        
        
        if(fltrColumn == -1){
            allApptblSorter.setRowFilter(RowFilter.regexFilter(fltrText));
        }
        else if((fltrText.equals("All Dates")) || (fltrText.equals("All")) || (fltrText.equals("All Appoinments"))){
            allApptblSorter.setRowFilter(null);
        }
        else{
            allApptblSorter.setRowFilter(RowFilter.regexFilter(fltrText, fltrColumn));
        }
        
    }
    
    //Method to add new appoinment details to the main table
    public static void addDataRowtoMainTable(int rowIndex, Object[] dataRow, String actionType){
        
        String appDate;
        
        int balanceAppMon;
        int balanceAppWed;
        int balanceAppSat;
        int balanceAppSun;
        
        //Adding data into the perticular row of main appoinments table
        DefaultTableModel allAppoinmentsTableModel = (DefaultTableModel) tblAllAppoinments.getModel();

        //When action type is "Add_Booking".
        if(actionType.equals("Add_Booking")){
            
            for (int i=0; i<dataRow.length; i++){
                allAppoinmentsTableModel.setValueAt(dataRow[i], rowIndex, (i+3));
            }
            
            //Updating appoinments summary table for added appoinments
            DefaultTableModel appSummaryTableModel = (DefaultTableModel) tblAppSummary.getModel();
        
            appDate = allAppoinmentsTableModel.getValueAt(rowIndex, 0).toString();
        
            balanceAppMon = Integer.parseInt(appSummaryTableModel.getValueAt(0, 2).toString());
            balanceAppWed = Integer.parseInt(appSummaryTableModel.getValueAt(1, 2).toString());
            balanceAppSat = Integer.parseInt(appSummaryTableModel.getValueAt(2, 2).toString());
            balanceAppSun = Integer.parseInt(appSummaryTableModel.getValueAt(3, 2).toString());
        
            switch (appDate) {
                case "Monday":
                    balanceAppMon--;
                    appSummaryTableModel.setValueAt(String.valueOf(balanceAppMon), 0, 2);
                    break;
                case "Wednesday":
                    balanceAppWed--;
                    appSummaryTableModel.setValueAt(String.valueOf(balanceAppWed), 1, 2);
                    break;
                case "Saturday":
                    balanceAppSat--;
                    appSummaryTableModel.setValueAt(String.valueOf(balanceAppSat), 2, 2);
                    break;    
                case "Sunday":
                    balanceAppSun--;
                    appSummaryTableModel.setValueAt(String.valueOf(balanceAppSun), 3, 2);
                    break;    
            }
        }
        //When action type is "Delete_Booking".
        else if(actionType.equals("Delete_Booking")){
            
            for(int i=3; i<14; i++){
                    tblAllAppoinments.setValueAt("", rowIndex, i);
                }
                tblAllAppoinments.setValueAt("Available", rowIndex, 14);
            
            //Updating appoinments summary table for delete appoinments
            DefaultTableModel appSummaryTableModel = (DefaultTableModel) tblAppSummary.getModel();
        
            appDate = allAppoinmentsTableModel.getValueAt(rowIndex, 0).toString();
        
            balanceAppMon = Integer.parseInt(appSummaryTableModel.getValueAt(0, 2).toString());
            balanceAppWed = Integer.parseInt(appSummaryTableModel.getValueAt(1, 2).toString());
            balanceAppSat = Integer.parseInt(appSummaryTableModel.getValueAt(2, 2).toString());
            balanceAppSun = Integer.parseInt(appSummaryTableModel.getValueAt(3, 2).toString());
        
            switch (appDate) {
                case "Monday":
                    balanceAppMon++;
                    appSummaryTableModel.setValueAt(String.valueOf(balanceAppMon), 0, 2);
                    break;
                case "Wednesday":
                    balanceAppWed++;
                    appSummaryTableModel.setValueAt(String.valueOf(balanceAppWed), 1, 2);
                    break;
                case "Saturday":
                    balanceAppSat++;
                    appSummaryTableModel.setValueAt(String.valueOf(balanceAppSat), 2, 2);
                    break;    
                case "Sunday":
                    balanceAppSun++;
                    appSummaryTableModel.setValueAt(String.valueOf(balanceAppSun), 3, 2);
                    break;    
            }
        }
 
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Home_Page.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Home_Page.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Home_Page.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Home_Page.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Home_Page().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBookAppoinment;
    private javax.swing.JButton btnDeleteAppoinment;
    private javax.swing.JButton btnUpdateAppoinment1;
    private javax.swing.JComboBox<String> cmbAppStatus;
    private javax.swing.JComboBox<String> cmbDate;
    private javax.swing.JComboBox<String> cmbTime;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel lblDate;
    private javax.swing.JLabel lblTime;
    private javax.swing.JLabel lblUserName;
    private static javax.swing.JTable tblAllAppoinments;
    private static javax.swing.JTable tblAppSummary;
    private javax.swing.JTextField txtSearchName;
    // End of variables declaration//GEN-END:variables
}
